package algoritmExam;
import java.util.Scanner;
public class Merge_Sort_2399 {
//	5
//	1 5 3 2 4
	public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        // 0 이상 1,000,000,000 이하의 정수 이기떄문에 long 변수 사용
        long[] arr = new long[N];
        long sum = 0;
        for (int i = 0; i < N; i++) {
            arr[i] = sc.nextLong();
        }
		// 합병정렬
		 mergeSort(arr, 0, arr.length - 1);
//		Arrays.sort(arr);
        for(int i=0; i<N; i++) {
            sum += arr[i] * ( 2 * i - N + 1 );
        }
        System.out.println(2*sum);
        sc.close();
	}
	/*
	 * arr[] : 정렬할 배열
	 * 	   l : left
	 *     r : right
	 */
	public static void mergeSort(long arr[], int l, int r) {
		if(l<r) {
			int mid = (l+r)/2;
			// 중간지점을 기준으로 양쪽 다 나워서 머지
			mergeSort(arr, l, mid);
			mergeSort(arr, mid+1, r);
			merge(arr, l, mid, r);
		}
	}
	public static void merge(long arr[], int l, int mid, int r) {
		
		int i = l;
		int j = mid+1;
		int k = l;
		long temp[] = new long[arr.length];
		while(i<=mid && j<=r) {
			if(arr[i] < arr[j]) {
				temp[k++] = arr[i++];
			}else {
				temp[k++] = arr[j++];
			}
		}
		while(i<=mid)
			temp[k++] = arr[i++];
		while(j<=r)
			temp[k++] = arr[j++];
		for(int index=l; index<k; index++) {
			arr[index] = temp[index];
		}
	}
}
